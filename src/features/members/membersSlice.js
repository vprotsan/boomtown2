import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchMembers } from './membersAPI';

const initialState = {
    members: [],
    status: 'idle',
    error: null
};

export const getMembersAsync = createAsyncThunk(
    'members/fetchMembers',
    async (url) => {
        const response = await fetchMembers(url);
        return response;
    }
);

export const membersSlice = createSlice({
    name: 'members',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getMembersAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getMembersAsync.rejected, (state) => {
          state.status = 'failed';
          state.error = "Sorry, There was an error retrieveing Members for this organization."
        })
        .addCase(getMembersAsync.fulfilled, (state, action) => {
          if(Array.isArray(action.payload)){
            state.status = 'successful';
            state.members.push(...action.payload);
          } else {
            state.status = 'failed';
            state.error = action.payload.message
          }
        });
    },
});

export const allMembers = (state) => state.members.members;
export const allMembersStatus = (state) => state.members.status;
export const allMembersError = (state) => state.members.error;

export default membersSlice.reducer;