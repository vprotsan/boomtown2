import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchOrganization } from './organizationAPI';

const initialState = {
    configs: [],
    status: 'idle',
    error: null
};

export const getOrganizationConfigAsync = createAsyncThunk(
    'organization/fetchOrganization',
    async () => {
        const response = await fetchOrganization();
        return response;
    }
);

export const organizationSlice = createSlice({
    name: 'organization',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getOrganizationConfigAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getOrganizationConfigAsync.rejected, (state) => {
          state.status = 'failed';
          state.error = "Sorry, There was an error retrieveing information."
        })
        .addCase(getOrganizationConfigAsync.fulfilled, (state, action) => {
          if(typeof action.payload === 'object' && action.payload !== null){
            state.status = 'successful';
            state.configs.push(action.payload);
          } else {
            state.status = 'failed';
            state.error = "Sorry, there was an error getting user information."
          }
        });
    },
});

export const selectOrganizationConfig = (state) => state.organization.configs;
export const selectOrganizationStatus = (state) => state.organization.status;
export const selectOrganizationError = (state) => state.organization.error;

export default organizationSlice.reducer;