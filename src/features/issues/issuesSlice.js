import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchIssues } from './issuesAPI';

const initialState = {
    issues: [],
    status: 'idle',
    error: null
};

export const getIssuesAsync = createAsyncThunk(
    'Issues/fetchIssues',
    async (url) => {
        const response = await fetchIssues(url);
        return response;
    }
);

export const issuesSlice = createSlice({
    name: 'issues',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getIssuesAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getIssuesAsync.rejected, (state) => {
          state.status = 'failed';
          state.error = "Sorry, There was an error retrieveing issues for this organization."
        })
        .addCase(getIssuesAsync.fulfilled, (state, action) => {

          if(Array.isArray(action.payload)){
            state.status = 'successful';
            state.issues.push(...action.payload);
          } else {
            state.status = 'failed';
            state.error = action.payload.message
          }
        });
    },
});

export const allIssues = (state) => state.issues.issues;
export const allIssuesStatus = (state) => state.issues.status;
export const allIssuesError = (state) => state.issues.error;

export default issuesSlice.reducer;