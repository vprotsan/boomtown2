import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchHooks } from './hooksAPI';

const initialState = {
    hooks: [],
    status: 'idle',
    error: null
};

export const getHooksAsync = createAsyncThunk(
    'hooks/fetchHooks',
    async (url) => {
        const response = await fetchHooks(url);
        return response;
    }
);

export const hooksSlice = createSlice({
    name: 'hooks',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getHooksAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(getHooksAsync.rejected, (state) => {
          state.status = 'failed';
          state.error = "Sorry, There was an error retrieveing hooks for this organization."
        })
        .addCase(getHooksAsync.fulfilled, (state, action) => {

          if(Array.isArray(action.payload)){
            state.status = 'successful';
            state.hooks.push(...action.payload);
          } else {
            state.status = 'failed';
            state.error = action.payload.message
          }
        });
    },
});

export const allHooks = (state) => state.hooks.hooks;
export const allHooksStatus = (state) => state.hooks.status;
export const allHooksError = (state) => state.hooks.error;

export default hooksSlice.reducer;